from mpf.tests.MpfMachineTestCase import MpfMachineTestCase
from mpfmc.tests.FullMpfMachineTestCase import FullMachineTestCase

class TestSkipToRoswellAllShotsSuccess(FullMachineTestCase):

    def test_skip_to_roswell_all_shots_success(self):
        self._start_game()
        self._skip_to_roswell_and_verify()
        self._collect_bender_test_fry_ramp_shots()
        self._progress_microwave_test_hopeless_search()
        self._progress_zoidberg()
        self._progress_enos()
        self._progress_mildred()
        self._steal_antenna_and_wrap_it_up()
        self._test_successful_roswell_mode_exit()


    def _start_game(self):
        self.hit_and_release_switch("s_start")
        self.advance_time_and_run(1)
        self.hit_and_release_switch("s_shooter_lane")
        self.advance_time_and_run(1)
        self.hit_and_release_switch("s_cap1")
        self.advance_time_and_run(1)
        self.assertEqual(1, self.machine.playfield.balls)

    def _skip_to_roswell_and_verify(self):
        self.post_event("test_roswell")
        self.advance_time_and_run(5)
        self.assertEqual("roswell_delivery_next", self.machine.state_machines.roswell_delivery_handler.state)
        self.hit_and_release_switch("s_right_ramp")
        self.advance_time_and_run(2)
        self.hit_and_release_switch("s_right_ramp")
        self.advance_time_and_run(2)
        self.assertEqual("roswell_delivery_enable", self.machine.state_machines.roswell_delivery_handler.state)
        self.hit_switch_and_run("s_VUK", 5)
        self.assertEqual("roswell_delivery_active", self.machine.state_machines.roswell_delivery_handler.state)
        self.assertModeRunning("roswell_delivery")
        self.assertPlayerVarEqual("no", "did_nasty_in_the_pasty")

    def _collect_bender_test_fry_ramp_shots(self):
#run the clock to get through the intro
        self.advance_time_and_run(15)
        self.assertEqual("start", self.machine.state_machines.enos_state.state)
        self.assertEqual("start", self.machine.state_machines.mildred_state.state)
        self.assertEqual("start", self.machine.state_machines.zoidberg_roswell_state.state)
        self.assertEqual("start", self.machine.state_machines.bender_pieces_state.state)
        self.assertEqual("start", self.machine.state_machines.microwave_state.state)
        self.advance_time_and_run(20)
#test that pop bumper doesn't progress zoidberg yet
        self.hit_and_release_switch("s_pop_bumper")
        self.assertEqual("start", self.machine.state_machines.zoidberg_roswell_state.state)
#advance bender pieces
        self.hit_and_release_switch("s_right_ramp")
        self.advance_time_and_run(1)
        self.assertEqual("one_pieces", self.machine.state_machines.bender_pieces_state.state)
        self.hit_and_release_switch("s_left_ramp")
        self.advance_time_and_run(1)
        self.assertEqual("two_pieces", self.machine.state_machines.bender_pieces_state.state)
        self.hit_and_release_switch("s_right_ramp")
        self.advance_time_and_run(1)
        self.assertEqual("three_pieces", self.machine.state_machines.bender_pieces_state.state)
        self.hit_and_release_switch("s_left_ramp")
        self.advance_time_and_run(1)
        self.assertEqual("four_pieces", self.machine.state_machines.bender_pieces_state.state)
        self.hit_and_release_switch("s_left_ramp")
        self.advance_time_and_run(2)
        self.assertEqual("five_pieces", self.machine.state_machines.bender_pieces_state.state)
        self.hit_and_release_switch("s_left_ramp")
        self.advance_time_and_run(2)
        self.assertEqual("its_enos", self.machine.state_machines.enos_state.state)
        self.hit_and_release_switch("s_right_ramp")
        self.advance_time_and_run(2)
        self.assertEqual("bayonets", self.machine.state_machines.enos_state.state)
        self.assertEqual("start", self.machine.state_machines.mildred_state.state)
        self.assertEqual("start", self.machine.state_machines.zoidberg_roswell_state.state)
        self.assertEqual("start", self.machine.state_machines.microwave_state.state)

    def _progress_microwave_test_hopeless_search(self):
#test microwave progression
        self.hit_and_release_switch("s_left_loop")
        self.assertEqual("yo_holmes", self.machine.state_machines.microwave_state.state)
#test loop shot doesn't count double when the full loop is hit
        self.hit_and_release_switch("s_right_loop")
        self.assertEqual("yo_holmes", self.machine.state_machines.microwave_state.state)
        self.advance_time_and_run(3)
        self.hit_and_release_switch("s_right_loop")
        self.assertEqual("ax_you_again", self.machine.state_machines.microwave_state.state)
        self.hit_and_release_switch("s_left_loop")
        self.assertEqual("ax_you_again", self.machine.state_machines.microwave_state.state)
        self.advance_time_and_run(3)
        self.hit_and_release_switch("s_right_loop")
        self.assertEqual("settle_in", self.machine.state_machines.microwave_state.state)
        self.advance_time_and_run(3)
        self.hit_and_release_switch("s_right_loop")
        self.assertEqual("could_steal_microwave", self.machine.state_machines.microwave_state.state)
#add test stesps to validate the "hopeless search" shots are working
        self.assertEqual("bayonets", self.machine.state_machines.enos_state.state)
        self.assertEqual("start", self.machine.state_machines.mildred_state.state)
        self.assertEqual("start", self.machine.state_machines.zoidberg_roswell_state.state)

    def _progress_zoidberg(self):
#test that pop bumper now advances zoidberg
        self.hit_and_release_switch("s_pop_bumper")
        self.assertEqual("zoidberg_captured", self.machine.state_machines.zoidberg_roswell_state.state)
        self.advance_time_and_run(3)
        self.hit_and_release_switch("s_dt_zoidberg")
        self.assertEqual("zoidberg_hello", self.machine.state_machines.zoidberg_roswell_state.state)
        self.advance_time_and_run(3)
        self.hit_and_release_switch("s_dt_zoidberg")
        self.assertEqual("why_come_to_earth", self.machine.state_machines.zoidberg_roswell_state.state)
        self.advance_time_and_run(3)
        self.hit_and_release_switch("s_dt_zoidberg")
        self.assertEqual("get_me_the_president", self.machine.state_machines.zoidberg_roswell_state.state)
        self.advance_time_and_run(3)
        self.hit_and_release_switch("s_dt_zoidberg")
        self.assertEqual("meeting_new_people", self.machine.state_machines.zoidberg_roswell_state.state)
        self.advance_time_and_run(3)
        self.hit_and_release_switch("s_dt_zoidberg")
        self.assertEqual("coming_on_to_me", self.machine.state_machines.zoidberg_roswell_state.state)
        self.advance_time_and_run(3)
        self.hit_and_release_switch("s_dt_zoidberg")
        self.assertEqual("alien_autopsy", self.machine.state_machines.zoidberg_roswell_state.state)
        self.advance_time_and_run(3)
        self.assertEqual("bayonets", self.machine.state_machines.enos_state.state)
        self.assertEqual("start", self.machine.state_machines.mildred_state.state)

    def _progress_enos(self):
        self.hit_and_release_switch("s_t_fry")
        self.assertEqual("this_place_dangerous", self.machine.state_machines.enos_state.state)
        self.advance_time_and_run(2)
        self.hit_and_release_switch("s_right_ramp")
        self.assertEqual("minefield", self.machine.state_machines.enos_state.state)
        self.advance_time_and_run(2)
        self.hit_and_release_switch("s_left_ramp")
        self.assertEqual("knife_dodge", self.machine.state_machines.enos_state.state)
        self.advance_time_and_run(2)
        self.hit_and_release_switch("s_t_fry")
        self.assertEqual("stay_put", self.machine.state_machines.enos_state.state)
        self.advance_time_and_run(2)
        self.assertEqual("start", self.machine.state_machines.mildred_state.state)
        self.hit_and_release_switch("s_t_fry")
        self.assertEqual("atomic_test", self.machine.state_machines.enos_state.state)
        self.advance_time_and_run(21)
        self.assertEqual("mildred_is_single", self.machine.state_machines.mildred_state.state)

    def _progress_mildred(self):
        self.hit_and_release_switch("s_t_fry")
        self.assertEqual("walk_me_home", self.machine.state_machines.mildred_state.state)
        self.advance_time_and_run(2)
        self.hit_and_release_switch("s_right_ramp")
        self.assertEqual("hold_me", self.machine.state_machines.mildred_state.state)
        self.advance_time_and_run(2)
        self.hit_and_release_switch("s_left_ramp")
        self.assertEqual("how_about_these_cookies", self.machine.state_machines.mildred_state.state)
        self.advance_time_and_run(8)
        self.hit_switch_and_run("s_VUK", 16)
        self.assertPlayerVarEqual("yes", "did_nasty_in_the_pasty")

    def _steal_antenna_and_wrap_it_up(self):
        self.advance_time_and_run(31)
        self.hit_switch_and_run("s_VUK", 10)
        self.assertPlayerVarEqual("success", "roswell_delivery_status")
        self.advance_time_and_run(12)

    def _test_successful_roswell_mode_exit(self):
        self.assertModeNotRunning("roswell_delivery")
        self.assertModeRunning("slurm_caps")
        self.assertModeRunning("crew_manager")
